import os
import time
import json
#import boto

Database='sampledb'
Table_CODS = 'cods_data'
Table_MDU = 'cods_mdu'
Table_CODS_MDU = 'cods_mdu_data'

# S3 constant
S3_OUTPUT = 's3://lly-future-state-arch-poc-dev'
S3_BUCKET = 'lly-future-state-arch-poc-dev'

# number of retries
RETRY_COUNT = 10

#User - Authorization - Later to be donne by OAuth2.0 Authentication
cods_user = os.environ['cods_user']
mdu_user  = os.environ['mdu_user']

def processData(allData):
    columnList = []
    outputData = []
    if(allData and len(allData) > 1 ):
        columnHeaders = allData[0]['Data'] 
        for column in columnHeaders:
            columnList.append(column['VarCharValue'])
        i = 0
        for data in allData:
            if i == 0:
                i = i + 1
                continue
            else:
                i = i + 1
                j = 0 
                row = {}
                for singleRow in data['Data']:
                    key = columnList[j]
                    value = ''
                    if 'VarCharValue' in singleRow:
                        value = singleRow['VarCharValue']
                    if(key=='email' or key =='phone'):
                        values =  []
                        if value and len(value) > 0:
                            values = value.split(",")
                        
                        row[key] = values
                        j = j+ 1
                    else:
                        row[key] = str(value)
                        j = j+ 1
                outputData.append(row)
    return outputData

def queryData(columnName, tableName, filterConditions): 
    client = boto3.client('athena')
    queryStr = "select " + str(columnName) + " FROM " + tableName + " where " + filterConditions
    response_query = client.start_query_execution(
            QueryString=queryStr,
            QueryExecutionContext={
                'Database': DATABASE
            },
            ResultConfiguration={
                'OutputLocation': S3_OUTPUT,
            }
        )
    query_execution_id = response_query['QueryExecutionId']

    # get execution status
    for i in range(1, 1 + RETRY_COUNT):

        # get query execution
        query_status = client.get_query_execution(QueryExecutionId=query_execution_id)
        query_execution_status = query_status['QueryExecution']['Status']['State']

        if query_execution_status == 'SUCCEEDED':
            print("STATUS:" + query_execution_status)
            break

        if query_execution_status == 'FAILED':
            raise Exception("STATUS:" + query_execution_status)

        else:
            print("STATUS:" + query_execution_status)
            time.sleep(i)
    result = client.get_query_results(QueryExecutionId=query_execution_id)
    allData =  result['ResultSet']['Rows']   
    return allData

def lambda_handler(event, context):
    status = 200
    responseBody = {}

    user = None
    requiredColumnsStr = "*"
    
    print(event)
    if not event:
        if not event.get('queryStringParameters') or not event.get('queryStringParameters').get('user'):
            status = 400
            responseBody = {'errorMessage' : 'Missing key "user" in query parameters'}
        else:
            status = 500
            responseBody = {'errorMessage' : 'Unknown Error' }
    else:
        if not event.get('queryStringParameters') or not event.get('queryStringParameters').get('user'):
            status = 400
            responseBody = { 'errorMessage': 'Missing key "user" in query parameters'}
        else:
            user = event.get('queryStringParameters').get('user')
            if 'requiredColumns' in event.get('queryStringParameters'):
                requiredColumnsStr = event.get('queryStringParameters').get('requiredColumns')

            filters = None
            res = {}
            filterColumns =None

            if 'body' in event:
                filterColumns = json.loads(event['body']) 
                for key in filterColumns.keys():  
                    res[key] = filterColumns[key]
                    if(filters and len(filters) > 0):
                        filters = filters + " and " + str(key) +"=" + "'" + str(filterColumns[key]) + "'"
                    else:
                        filters = str(key) +"=" + "'" + str(filterColumns[key]) + "'"
                res['final'] = filters
            
            filterTable = None
            if user in mdu_user and user in cods_user:
                filterTable = Table_CODS_MDU
            elif user in mdu_user:
                filterTable = Table_MDU
            elif user in cods_user:
                filterTable = Table_CODS
            
            if(filterTable):
                allData = queryData(requiredColumnsStr, filterTable,  filterColumns)
                processedData = processData(allData)
                responseBody= processedData
                status = 200
            else:
                status=403
                responseBody='User has no access'
                
    response = {
        'statusCode': status,
        'headers': {
            'Access-Control-Allow-Origin': '*',
            'Content-Type': 'application/json',
            'Access-Control-Allow-Credentials': 'true',
            'Access-Control-Allow-Headers': '*'
        },
        'body': json.dumps({"status":status,"data":responseBody})
        }
    
    return response


    


 
